	    // We are going to go back to the car analogy.
        // Create a base class called Car
        // It should have a few fields that would be appropriate for a generice car calss.
        // engine, cylinders, wheels, etc.
        // Constructor should initialize cylinders (number of) and name, and set wheels to 4
        // and engine to true. Cylinders and names would be passed parameters.
        //
        // Create appropriate getters
        //
        // Create some methods like startEngine, accelerate, and brake
        //
        // show a message for each in the base class
        // Now create 3 sub classes for your favorite vehicles.
        // Override the appropriate methods to demonstrate polymorphism in use.
        // put all classes in the one java file (this one).

class PolymorphismChallenge{
    public static void main(String[] arrrrrggs){
        Car myCar = new Car("Car", 4);
        System.out.println(myCar.startEngine());
        System.out.println(myCar.accelerate());
        System.out.println(myCar.brake());

        myCar = new Tesla("Tesla", 4);
        System.out.println(myCar.startEngine());
        System.out.println(myCar.accelerate());
        System.out.println(myCar.brake());

        myCar = new Ford("Ford", 4);
        System.out.println(myCar.startEngine());
        System.out.println(myCar.accelerate());
        System.out.println(myCar.brake());

        myCar = new Nissan("Nissan", 4);
        System.out.println(myCar.startEngine());
        System.out.println(myCar.accelerate());
        System.out.println(myCar.brake());
    }
}

class Car{
    private boolean engine;
    private int cylinders;
    private int wheels;
    private String name;

    Car(String name, int cylinders){
        this.wheels = 4;
        this.name = name;
        this.cylinders = cylinders;
        this.engine = true;
    }

    public int getWheels() {
        return wheels;
    }

    public String getName() {
        return name;
    }

    String label() {
        return "Car --> ";
    }

    public String startEngine(){
        return label() + "Turning on the engine";
    }

    public String accelerate(){
        return label() + "Increasing speed";
    }

    public String brake(){
        return label() + "Decreasing speed";
    }
}

class Ford extends Car {
    public Ford(String name, int cylinders) {
        super(name, cylinders);
    }

    @Override
    String label() {
        return "Ford --> ";
    }
}

class Tesla extends Car {
    public Tesla(String name, int cylinders) {
        super(name, cylinders);
    }

    @Override
    String label() {
        return "Tesla --> ";
    }
}

class Nissan extends Car {
    public Nissan(String name, int cylinders) {
        super(name, cylinders);
    }

    @Override
    String label() {
        return "Nissan --> ";
    }
}
